#! /usr/bin/python
"""
=========================================================================
This file is part of LyX Notebook, which works with LyX (and is licensed 
in the same way) but is an independent project.  License details (GPL V2) 
can be found in the file COPYING.

Copyright (C) 2012 Allen Barker
=========================================================================


This script runs the Lyx Notebook program.  It mainly checks to make sure
that there is no other active Lyx Notebook process running, and if not then
it launches an instance of the main ControllerLyxWithInterpreter class.
"""

from __future__ import print_function, division
import os, sys
from controllerLyxWithInterpreter import *
import lyxNotebookUserSettings

# set the lockfile location to be in the user's local Lyx directory
userHomeLyxDirectory = lyxNotebookUserSettings.userHomeLyxDirectory
lockfilePath = os.path.expanduser(
      os.path.join(userHomeLyxDirectory,"lyxNotebook.lockfile"))

#
# Make sure this script is not already running in an existing process.
# This method uses a lock file containing the PID, and was modified from code at
# http://shoaibmir.wordpress.com/2009/12/14/pid-lock-file-in-python/
#

# first check if a lock file already exists
if os.path.exists(lockfilePath):
    # if the lockfile is already there then check the PID number in the lock file
    pidfile = open(lockfilePath, "r")
    pidfile.seek(0)
    oldPID = pidfile.readline()
    # check if the PID from the lock file matches the current process PID
    if os.path.exists(os.path.join("/proc", oldPID)):
       print("You already have an instance of LyX Notebook running.")
       print("It is running as process", oldPID + ".  Exiting.")
       time.sleep(4) # for when a new terminal opened, so message can be read
       sys.exit(1)
    else:
       # lock file exists but the program is not running... remove it
       os.remove(lockfilePath)

# put the current PID in the lock file
pidfile = open(lockfilePath, "w")
pidfile.write(str(os.getpid()))
pidfile.close()

# Get the Lyx Notebook home directory; some interpreters may use this if they
# store data in the auxiliaryFilesForInterpreters directory.
myCWD = os.getcwd()
callingCommand = os.path.join(myCWD, os.path.expanduser(sys.argv[0]))
lyxNotebookSourceDir = os.path.dirname(callingCommand)

#
# Start the main controller class.
#
  
print("\n===================================================\n")
print("Starting the Lyx Notebook program...")
print("Version from source directory", lyxNotebookSourceDir)

controller = ControllerLyxWithInterpreter("lyxNotebookClient") 

